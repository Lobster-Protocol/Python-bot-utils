"""Tests for Uniswap V3 mint function encoder."""

import warnings

from uniswap_calls import encode_mint

warnings.filterwarnings("ignore", category=DeprecationWarning, module="websockets")


def test_encode_mint() -> None:
    """Function: mint(tuple params).

    MethodID: 0x88316456
    [0]:  0000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238
    [1]:  000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b14
    [2]:  0000000000000000000000000000000000000000000000000000000000000064
    [3]:  0000000000000000000000000000000000000000000000000000000000029f4d
    [4]:  000000000000000000000000000000000000000000000000000000000002a335
    [5]:  000000000000000000000000000000000000000000000000000000000064d254
    [6]:  0000000000000000000000000000000000000000000000000000b76fc7fc4810
    [7]:  0000000000000000000000000000000000000000000000000000000000000000
    [8]:  0000000000000000000000000000000000000000000000000000000000000000
    [9]:  0000000000000000000000009a33c2fe2515b87ee5c36819d82126e1e66273c6
    [10]: 0000000000000000000000000000000000000000000000000000000068396a34
    """
    token0: str = "0x1c7d4b196cb0c7b01d743fbc6116a902379c7238"
    token1: str = "0xfff9976782d46cc05630d1f6ebab18b2324d6b14"
    fee: int = 100
    tick_lower: int = 171853
    tick_upper: int = 172853
    amount0_desired: int = 6607444
    amount1_desired: int = 201690724452368
    amount0_min: int = 0
    amount1_min: int = 0
    recipient: str = "0x9a33c2fe2515b87ee5c36819d82126e1e66273c6"
    deadline: int = 1748593204

    encoded_call: str = encode_mint(
        token0=token0,
        token1=token1,
        fee=fee,
        tick_lower=tick_lower,
        tick_upper=tick_upper,
        amount0_desired=amount0_desired,
        amount1_desired=amount1_desired,
        amount0_min=amount0_min,
        amount1_min=amount1_min,
        recipient=recipient,
        deadline=deadline,
    )
    assert isinstance(encoded_call, str)
    # Ensure the encoded call is the same as the expected value
    expected_call: str = (
        "0x883164560000000000000000000000001c7d4b196cb0c7b01d743fbc6116a902379c7238000000000000000000000000fff9976782d46cc05630d1f6ebab18b2324d6b1400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000029f4d000000000000000000000000000000000000000000000000000000000002a335000000000000000000000000000000000000000000000000000000000064d2540000000000000000000000000000000000000000000000000000b76fc7fc4810000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009a33c2fe2515b87ee5c36819d82126e1e66273c60000000000000000000000000000000000000000000000000000000068396a34"  # noqa
    )
    assert (
        encoded_call == expected_call
    ), f"Expected {expected_call}, got {encoded_call}"
